<?xml version="1.0" encoding="UTF-8"?>
<ViewConfig>
  <Model>
    <DataType name="CategoryNode" parent="BaseExampleCategory">
      <Reference name="categories" dataProvider="exampleMaintain#getCategories" dataType="[CategoryNode]" parameter="$${this.id}"/>
      <Reference name="examples" dataProvider="exampleMaintain#getExamplesByCategoryId" parameter="$${this.id}">
        <Property name="dataType">[BaseExample]</Property>
      </Reference>
    </DataType>
  </Model>
  <View layout="Form cols:400,*;padding:20" title="Editors and Triggers">
    <ClientEvent name="onCreate">self.$onMathTriggerExecute = function(self, arg) {&#xD;
	var n = arg.editor.get(&quot;value&quot;);&#xD;
	n = eval(n + self.get(&quot;userData&quot;));&#xD;
	arg.editor.set(&quot;value&quot;, n);&#xD;
}</ClientEvent>
    <FormProfile id="defaultFormProfile">
      <Property name="showHintMessage">false</Property>
      <Property name="type">text</Property>
      <Property name="showValidHint">true</Property>
      <Property name="labelWidth">150</Property>
      <Property name="width">380</Property>
    </FormProfile>
    <Trigger id="trigger1">
      <ClientEvent name="onExecute">arg.editor.set(&quot;text&quot;, &quot;Trigger设置的值&quot;);</ClientEvent>
    </Trigger>
    <FormElement>
      <Property name="label">自定义的Trigger1</Property>
      <Property name="trigger">trigger1</Property>
      <Editor/>
    </FormElement>
    <Label>
      <Property name="text">Trigger可以看作是跟编辑框显示在一起的一个按钮，可以在其中放置任何逻辑。</Property>
    </Label>
    <Dialog id="dialog2" layout="anchor">
      <Property name="caption">弹出窗口</Property>
      <Property name="width">300</Property>
      <Property name="height">150</Property>
      <Property name="modal">true</Property>
      <Property name="center">true</Property>
      <Children>
        <Button layoutConstraint="top:50%;left:50%">
          <ClientEvent name="onClick">var dialog = this.id(&quot;dialog2&quot;);&#xD;
var editor = dialog.get(&quot;userData&quot;); // 取得对应的编辑框 &#xD;
editor.set(&quot;text&quot;, &quot;Trigger设置的值&quot;);&#xD;
dialog.hide();</ClientEvent>
          <Property name="width">向编辑框返回一个值</Property>
          <Property name="caption">向编辑框返回一个值</Property>
        </Button>
      </Children>
    </Dialog>
    <Trigger id="trigger2">
      <ClientEvent name="onExecute">var dialog = this.id(&quot;dialog2&quot;);&#xD;
dialog.set(&quot;userData&quot;, arg.editor);&#xD;
dialog.show();</ClientEvent>
      <Property name="iconClass">d-trigger-icon-search</Property>
    </Trigger>
    <FormElement>
      <Property name="label">自定义的Trigger2</Property>
      <Property name="trigger">trigger2</Property>
      <Editor/>
    </FormElement>
    <Label>
      <Property name="text">Trigger可以看作是跟编辑框显示在一起的一个按钮，可以在其中放置任何逻辑。</Property>
    </Label>
    <Trigger id="trigger3">
      <ClientEvent name="onExecute">this.$onMathTriggerExecute(self, arg);&#xD;
</ClientEvent>
      <Property name="userData">*2</Property>
      <Property name="icon">>dorado/res/com/bstek/dorado/sample/widget/form/images/m2.gif</Property>
    </Trigger>
    <Trigger id="trigger4">
      <ClientEvent name="onExecute">this.$onMathTriggerExecute(self, arg);</ClientEvent>
      <Property name="userData">*3</Property>
      <Property name="icon">>dorado/res/com/bstek/dorado/sample/widget/form/images/m3.gif</Property>
    </Trigger>
    <Trigger id="trigger5">
      <ClientEvent name="onExecute">this.$onMathTriggerExecute(self, arg);</ClientEvent>
      <Property name="userData">/2</Property>
      <Property name="icon">>dorado/res/com/bstek/dorado/sample/widget/form/images/d2.gif</Property>
    </Trigger>
    <Trigger id="trigger6">
      <ClientEvent name="onExecute">this.$onMathTriggerExecute(self, arg);</ClientEvent>
      <Property name="userData">/3</Property>
      <Property name="icon">>dorado/res/com/bstek/dorado/sample/widget/form/images/d3.gif</Property>
    </Trigger>
    <FormElement>
      <Property name="label">自定义的Trigger3</Property>
      <Property name="trigger">trigger3,trigger4,trigger5,trigger6</Property>
      <Editor>
        <TextEditor>
          <Property name="text">1</Property>
        </TextEditor>
      </Editor>
    </FormElement>
    <Label>
      <Property name="text">看，我们给Trigger定义了自己的图标。</Property>
    </Label>
    <ListDropDown id="dropDownList">
      <Property name="items">${dorado.getDataProvider(&quot;categoryInterceptor#getAll&quot;).getResult()}</Property>
      <Property name="property">categoryName</Property>
    </ListDropDown>
    <FormElement>
      <Property name="label">普通的列表下拉框</Property>
      <Property name="trigger">dropDownList</Property>
      <Editor/>
    </FormElement>
    <Label>
      <Property name="text">下拉框其实是一种特殊的Trigger。</Property>
    </Label>
    <ListDropDown id="dropDownGrid">
      <Property name="items">${dorado.getDataProvider(&quot;categoryInterceptor#getAll&quot;).getResult()}</Property>
      <Property name="property">categoryName</Property>
      <Property name="width">260</Property>
      <DataColumn>
        <Property name="property">categoryName</Property>
        <Property name="width">100</Property>
      </DataColumn>
      <DataColumn>
        <Property name="property">description</Property>
        <Property name="width">*</Property>
      </DataColumn>
    </ListDropDown>
    <FormElement>
      <Property name="label">包含Grid的下拉框</Property>
      <Property name="labelPosition">left</Property>
      <Property name="trigger">dropDownGrid</Property>
      <Editor/>
    </FormElement>
    <Label>
      <Property name="text">定义Grid型的下拉框对dorado而言异常简单。</Property>
    </Label>
    <ListDropDown id="dropDownFilter">
      <ClientEvent name="onCreate">function getRandomChar() {&#xD;
	var i = parseInt(Math.random() * 5);&#xD;
	return String.fromCharCode(i + (parseInt(Math.random() * 2) ? 'A' : 'a').charCodeAt(0));&#xD;
}&#xD;
&#xD;
function getRandomString(len) {&#xD;
	var s = '';&#xD;
	for (var i = 0; i &lt; len; i++) s += getRandomChar();&#xD;
	return s;&#xD;
}&#xD;
&#xD;
var items = [];&#xD;
for (var i = 0; i &lt; 1000; i++) {&#xD;
	items.push(getRandomString(parseInt(Math.random() * 10) + 10));&#xD;
}&#xD;
self.set(&quot;items&quot;, items);</ClientEvent>
      <Property name="autoOpen">true</Property>
      <Property name="filterOnTyping">true</Property>
      <Property name="maxHeight">300</Property>
      <Property name="dynaFilter">true</Property>
    </ListDropDown>
    <FormElement>
      <Property name="trigger">dropDownFilter</Property>
      <Property name="label">支持自动筛选的下拉框</Property>
      <Editor/>
    </FormElement>
    <Label>
      <Property name="text">这是一种可以随着你的输入动作自动对下拉值进行筛选的下拉框。</Property>
    </Label>
    <DataSet id="dataSetProducts">
      <Property name="dataProvider">productInterceptor#findProductsByName</Property>
      <Property name="dataType">[BaseProduct]</Property>
    </DataSet>
    <DataSetDropDown id="dropDownAjaxFilter">
      <Property name="dataSet">dataSetProducts</Property>
      <Property name="displayProperty">productName</Property>
      <Property name="width">260</Property>
      <Property name="filterOnTyping">false</Property>
      <Property name="dynaFilter">true</Property>
    </DataSetDropDown>
    <FormElement>
      <Property name="label">与DataSet绑定的下拉框</Property>
      <Property name="trigger">dropDownAjaxFilter</Property>
      <Editor/>
    </FormElement>
    <Label>
      <Property name="text">这是另一种支持下拉值筛选的下拉框，其筛选逻辑可以由Server端来实现。请尝试在打开下拉框之后输入\&quot;文\&quot;然后点击那个小漏斗。</Property>
    </Label>
    <CustomDropDown id="dropDownSlider">
      <Slider>
        <ClientEvent name="onValueChange">var dropdown = dorado.widget.DropDown.findDropDown(self);&#xD;
var editor = dropdown.get(&quot;editor&quot;);&#xD;
dropdown.close(self.get(&quot;value&quot;));</ClientEvent>
      </Slider>
    </CustomDropDown>
    <FormElement>
      <Property name="trigger">dropDownSlider</Property>
      <Property name="label">自定义滑动条下拉框</Property>
      <Editor/>
    </FormElement>
    <Label>
      <Property name="text">自定义下拉框意味着我们可以在下拉框中放入任何想要的内容。</Property>
    </Label>
    <CustomDropDown id="dropDownPoker">
      <BlockView>
        <ClientEvent name="onCreate">self.set(&quot;renderer&quot;, new dorado.widget.blockview.ImageBlockRenderer({&#xD;
	captionProperty: &quot;value&quot;&#xD;
}));&#xD;
</ClientEvent>
        <ClientEvent name="onBlockClick">var dropDown = dorado.widget.DropDown.findDropDown(self);&#xD;
dropDown.close(arg.data.value);</ClientEvent>
        <Property name="items">
          <Collection>
            <Entity>
              <Property name="value">黑桃</Property>
              <Property name="image">>dorado/res/com/bstek/dorado/sample/widget/form/images/pique.png</Property>
            </Entity>
            <Entity>
              <Property name="value">红桃</Property>
              <Property name="image">>dorado/res/com/bstek/dorado/sample/widget/form/images/coeur.png</Property>
            </Entity>
            <Entity>
              <Property name="value">草花</Property>
              <Property name="image">>dorado/res/com/bstek/dorado/sample/widget/form/images/trefle.png</Property>
            </Entity>
            <Entity>
              <Property name="value">方片</Property>
              <Property name="image">>dorado/res/com/bstek/dorado/sample/widget/form/images/carreau.png</Property>
            </Entity>
          </Collection>
        </Property>
        <Property name="renderer">dorado.widget.blockview.ImageBlockRenderer</Property>
        <Property name="height">118</Property>
        <Property name="width">450</Property>
        <Property name="blockWidth">100</Property>
        <Property name="blockHeight">100</Property>
        <Property name="fillLine">true</Property>
      </BlockView>
    </CustomDropDown>
    <FormElement>
      <Property name="trigger">dropDownPoker</Property>
      <Property name="label">自定义花色下拉框</Property>
      <Editor/>
    </FormElement>
    <Label>
      <Property name="text">这只是另一个的自定义下拉框的使用场景，与上面的例子没有太大的不同。</Property>
    </Label>
    <CustomDropDown id="dropDownTree">
      <Property name="height">260</Property>
      <Container>
        <Property name="height">260</Property>
        <Property name="width">260</Property>
        <DataSet id="dataSetExamples">
          <Property name="dataType">[CategoryNode]</Property>
          <Property name="dataProvider">exampleMaintain#getCategories</Property>
          <Property name="loadMode">onReady</Property>
        </DataSet>
        <DataTree id="treeCategories">
          <ClientEvent name="onDataRowClick">var dropDown = dorado.widget.DropDown.findDropDown(self);&#xD;
var node = self.get(&quot;currentNode&quot;);&#xD;
if (node &amp;&amp; node.get(&quot;bindingConfig.name&quot;) == &quot;Example&quot;) {&#xD;
	dropDown.close(node.get(&quot;data.label&quot;));&#xD;
}</ClientEvent>
          <Property name="dataSet">dataSetExamples</Property>
          <Property name="style"></Property>
          <BindingConfigs>
            <BindingConfig childrenProperty="categories" icon=">images/folder.gif" labelProperty="label" name="Category" recursive="true">
              <Property name="expandLevel">1</Property>
              <BindingConfig>
                <Property name="name">Example</Property>
                <Property name="childrenProperty">examples</Property>
                <Property name="labelProperty">label</Property>
                <Property name="icon">>images/file.gif</Property>
              </BindingConfig>
            </BindingConfig>
          </BindingConfigs>
        </DataTree>
      </Container>
    </CustomDropDown>
    <FormElement>
      <Property name="trigger">dropDownTree</Property>
      <Property name="label">自定义树状列表下拉框</Property>
      <Editor/>
    </FormElement>
    <Label>
      <Property name="text">一种常见的自定义下拉框的使用场景。</Property>
    </Label>
    <YearMonthDropDown id="dropDownYearMonth">
      <ClientEvent name="onValueSelect">var value = arg.selectedValue;&#xD;
arg.selectedValue = value.year + &quot;年&quot; + (value.month + 1) + &quot;月&quot;;</ClientEvent>
    </YearMonthDropDown>
    <FormElement>
      <Property name="trigger">dropDownYearMonth</Property>
      <Property name="label">年月下拉框</Property>
      <Editor/>
    </FormElement>
    <Label>
      <Property name="text">年月下拉框被抽象成了一种控件，十分方便使用。</Property>
    </Label>
    <FormElement>
      <Property name="label">IP地址编辑框</Property>
      <Editor>
        <CustomSpinner>
          <Property name="pattern">IP: [0,255].[0,255].[0,255].[0,255]</Property>
          <Property name="value">192,168,18,223</Property>
        </CustomSpinner>
      </Editor>
    </FormElement>
    <Label id="label1">
      <Property name="text">这是Spinner控件的示例，Spinner从内部实现的角度来看不过是编辑框和Trigger结合后的一种产物。</Property>
    </Label>
    <FormElement>
      <Property name="trigger">defaultDateDropDown</Property>
      <Property name="label">较复杂的时间编辑框</Property>
      <Editor>
        <DateTimeSpinner>
          <ClientEvent name="onCreate">self.set(&quot;value&quot;, new Date());&#xD;
</ClientEvent>
          <Property name="type">dateTime</Property>
        </DateTimeSpinner>
      </Editor>
    </FormElement>
    <Label>
      <Property name="text">Spinner上还可以绑定更多的Trigger或下拉框。</Property>
    </Label>
  </View>
</ViewConfig>
