<?xml version="1.0" encoding="UTF-8"?>
<project xmlns:ivy="antlib:org.apache.ivy.ant"
         name="wrapper"
         default="buildAll">
	<property environment="env" />

	<taskdef resource="net/sf/antcontrib/antlib.xml">
		<classpath>
			<pathelement location="${homeDir}/lib/ant-contrib-1.0b3.jar" />
		</classpath>
	</taskdef>
	<taskdef resource="com/bstek/dorado/ant/task.properties">
		<classpath>
			<pathelement path="${homeDir}/lib/dorado-ant-task.jar" />
			<pathelement path="${homeDir}/lib/js.jar" />
			<pathelement path="${homeDir}/lib/commons-lang-2.5.jar" />
		</classpath>
	</taskdef>
	<taskdef name="yui-compressor"
	         classname="net.noha.tools.ant.yuicompressor.tasks.YuiCompressorTask">
		<classpath>
			<pathelement path="${homeDir}/lib/yuicompressor-2.4.2.jar" />
			<pathelement path="${homeDir}/lib/yui-compressor-ant-task-0.5.jar" />
		</classpath>
	</taskdef>
	<taskdef name="jsdoctoolkit"
	         classname="uk.co.darrenhurley.ant.tasks.JsDocToolkit">
		<classpath>
			<pathelement path="${homeDir}/lib/jsdoc-toolkit-ant-task-1.1.2.jar" />
			<pathelement path="${homeDir}/lib/js.jar" />
		</classpath>
	</taskdef>
	<taskdef resource="org/apache/ivy/ant/antlib.xml"
	         uri="antlib:org.apache.ivy.ant">
		<classpath>
			<pathelement location="${homeDir}/lib/ivy-2.2.0.jar" />
			<pathelement location="${homeDir}/lib/oro-2.0.8.jar" />
		</classpath>
	</taskdef>

	<var name="libDir" unset="true" />
	<property name="libDir" value="${homeDir}/lib" />

	<var name="resourcesDir" unset="true" />
	<property name="resourcesDir" value="${homeDir}/resources" />

	<property name="ivy.fileNamePattern"
	          value="[artifact]-[revision](-[classifier]).[ext]" />
	<property name="jsdoc-toolkit.home"
	          value="${resourcesDir}/jsdoc_toolkit-2.4.0/" />

	<target name="initVariables">
		<if>
			<not>
				<isset property="revision" />
			</not>
			<then>
				<if>
					<equals arg1="${qualifier}" arg2="RELEASE" />
					<then>
						<property name="revision" value="${version}" />
					</then>
					<else>
						<property name="revision"
						          value="${version}-${qualifier}" />
					</else>
				</if>
			</then>
		</if>

		<if>
			<not>
				<isset property="publication" />
			</not>
			<then>
				<tstamp>
					<format property="publication"
					        pattern="yyMMdd.HHmm"
					        locale="true" />
				</tstamp>
				<property name="fullVersion"
				          value="${revision}.${publication}" />
			</then>
		</if>

		<var name="baseFileName" value="${archieveName}-${revision}" />
	</target>

	<target name="clean">
		<!--
		<delete dir="${workDir}" />
		-->
	</target>

	<target name="prepareWorkDir">
		<mkdir dir="${workDir}" />
		<mkdir dir="${workDir}/src" />
		<mkdir dir="${workDir}/client" />
		<mkdir dir="${workDir}/bin" />
		<mkdir dir="${workDir}/lib" />
		<mkdir dir="${workDir}/javadoc" />
		<mkdir dir="${workDir}/jsdoc" />
		<mkdir dir="${workDir}/temp" />

		<mkdir dir="${targetDir}" />
	</target>

	<target name="init" depends="initVariables,clean,prepareWorkDir">
		<if>
			<isreference refid="userClasspath" />
			<then>
				<path id="classpath">
					<path refid="userClasspath" />
					<fileset dir="${workDir}/lib" includes="*.jar" />
				</path>
			</then>
			<else>
				<path id="classpath">
					<fileset dir="${workDir}/lib" includes="*.jar" />
				</path>
			</else>
		</if>
	</target>

	<target name="doMergeSource">
		<echo message="Merge Source: ${src} --> ${targetSourceDir}" />
		<if>
			<available file="${src}" />
			<then>
				<copy todir="${targetSourceDir}">
					<fileset dir="${src}" excludes="**/.*/**" />
				</copy>
			</then>
		</if>
	</target>

	<target name="mergeSource">
		<foreach list="${javaSrc}" param="src" target="doMergeSource">
			<param name="targetSourceDir" value="${workDir}/src" />
		</foreach>

		<foreach list="${clientSrc}" param="src" target="doMergeSource">
			<param name="targetSourceDir" value="${workDir}/client" />
		</foreach>
	</target>

	<target name="preprocessClientSource">
		<replace dir="${workDir}/client"
		         token="%version%"
		         value="${revision}"
		         encoding="${srcCharset}">
			<include name="**/*.js" />
			<include name="**/*.css" />
		</replace>
	</target>

	<target name="compressCss">
		<if>
			<available file="${workDir}/client/skins" />
			<then>
				<mkdir dir="${workDir}/bin/dorado/skins" />
				<yui-compressor fromDir="${workDir}/client/skins"
				                toDir="${workDir}/bin/dorado/skins"
				                warn="false"
				                munge="true"
				                charset="${srcCharset}"
				                cssSuffix=".min.css"
				                preserveAllSemiColons="false"
				                optimize="true"
				                lineBreakPosition="1000">
					<include name="**/*.css" />
					<exclude name="**/*.min.css" />
				</yui-compressor>
			</then>
		</if>
	</target>

	<target name="jsdoc" if="${buildJsDoc}">
		<copy todir="${workDir}/jsdoc">
			<fileset dir="${resourcesDir}/jsdoc-template" />
		</copy>

		<jsdoctoolkit jsdochome="${jsdoc-toolkit.home}"
		              suppresssourceout="true"
		              template="json"
		              outputdir="${workDir}/jsdoc/data"
		              verbose="true">
			<fileset dir="${workDir}/client/scripts" includes="**/*.js" />
		</jsdoctoolkit>

		<replace dir="${workDir}/jsdoc"
		         token="%name%"
		         value="${name}"
		         encoding="${srcCharset}">
			<include name="index.js" />
		</replace>
		<replace dir="${workDir}/jsdoc"
		         token="%revision%"
		         value="${fullVersion}"
		         encoding="${srcCharset}">
			<include name="index.js" />
		</replace>

		<zip compress="true" destfile="${targetDir}/${baseFileName}-jsdoc.zip">
			<fileset dir="${workDir}/jsdoc" />
		</zip>
	</target>

	<target name="tidyJavaScript">
		<if>
			<available file="${workDir}/client" />
			<then>
				<js-tidy>
					<fileset dir="${workDir}/client" includes="**/*.js" />
				</js-tidy>
			</then>
		</if>
	</target>

	<target name="compressJavaScript">
		<if>
			<available file="${workDir}/client" />
			<then>
				<mkdir dir="${workDir}/bin/dorado" />

				<yui-compressor fromDir="${workDir}/client"
				                toDir="${workDir}/bin/dorado"
				                warn="false"
				                munge="true"
				                charset="${srcCharset}"
				                jsSuffix=".min.js"
				                preserveAllSemiColons="false"
				                optimize="true"
				                lineBreakPosition="1000">
					<include name="**/*.js" />
					<exclude name="**/*.min.js" />
				</yui-compressor>
			</then>
		</if>
	</target>

	<target name="buildI18N">
		<mkdir dir="${workDir}/bin/dorado/resources/i18n" />
		<build-i18n-resource inputDir="${workDir}/client/resources/i18n"
		                     outputDir="${workDir}/bin/dorado/resources/i18n" />
	</target>

	<target name="buildClient"
	        depends="preprocessClientSource,jsdoc,compressCss,tidyJavaScript,compressJavaScript,buildI18N">
		<copy todir="${workDir}/bin/dorado">
			<fileset dir="${workDir}/client" />
		</copy>
	</target>

	<target name="preprocessJavaSource">
		<propertyfile file="${workDir}/src/META-INF/dorado-package.properties">
			<entry key="version" value="${fullVersion}" />
		</propertyfile>
	</target>

	<target name="resolveDependencies">
		<if>
			<available file="${ivyFile}" />
			<then>
				<copy todir="${workDir}/temp">
					<fileset dir="${resourcesDir}" includes="ivysettings.*" />
				</copy>

				<ivy:configure file="${workDir}/temp/ivysettings.xml" />

				<ivy:resolve file="${resourcesDir}/ivy.xml" />
				<ivy:retrieve pattern="${workDir}/lib/${ivy.fileNamePattern}"
				              conf="compile" />

				<ivy:resolve file="${ivyFile}" />
				<ivy:retrieve pattern="${workDir}/lib/${ivy.fileNamePattern}"
				              conf="compile" />
			</then>
		</if>
	</target>

	<target name="compile" depends="resolveDependencies" if="${compileJava}">
		<javac classpathref="classpath"
		       srcdir="${workDir}/src"
		       destdir="${workDir}/bin"
		       debug="true"
		       deprecation="true"
		       nowarn="false"
		       includeantruntime="true"
		       source="${javaCompatSource}"
		       target="${javaCompatTarget}"
		       encoding="${srcCharset}" />
	</target>

	<target name="javadoc" if="${buildJavaDoc}">
		<javadoc access="protected"
		         author="true"
		         encoding="${srcCharset}"
		         docencoding="${srcCharset}"
		         charset="${srcCharset}"
		         destdir="${workDir}/javadoc"
		         doctitle="${name} API Documentation"
		         nodeprecated="false"
		         nodeprecatedlist="false"
		         noindex="false"
		         nonavbar="false"
		         notree="false"
		         source="${javaCompatSource}"
		         splitindex="true"
		         use="true"
		         version="true"
		         useexternalfile="yes">
			<classpath refid="classpath" />
			<fileset dir="${workDir}/src" />
			<doctitle>&lt;h1&gt;${name} API Documentation&lt;/h1&gt;</doctitle>
			<bottom>Copyright Â© 2001-2011 www.BSTEK.com All Rights Reserved.</bottom>
			<link href="http://www.BSDN.org/projects/dorado7" />
		</javadoc>
		<copy file="${resourcesDir}/stylesheet.css"
		      todir="${workDir}/javadoc"
		      overwrite="true" />

		<jar compress="true" jarfile="${targetDir}/${baseFileName}-javadoc.jar">
			<fileset dir="${workDir}/javadoc" />
			<manifest>
				<attribute name="Implementation-Title" value="${name}" />
				<attribute name="Implementation-Vendor" value="${vendor}" />
				<attribute name="Implementation-Version"
				           value="${fullVersion}" />
			</manifest>
		</jar>
	</target>

	<target name="buildJar" if="${buildJar}">
		<jar compress="true" jarfile="${targetDir}/${baseFileName}.jar">
			<fileset dir="${workDir}/bin" />
			<fileset dir="${workDir}/src" excludes="**/*.java" />
			<manifest>
				<attribute name="Implementation-Title" value="${name}" />
				<attribute name="Implementation-Vendor" value="${vendor}" />
				<attribute name="Implementation-Version"
				           value="${fullVersion}" />
			</manifest>
		</jar>
	</target>

	<target name="buildSourceJar" if="${buildSourceJar}">
		<jar compress="true" jarfile="${targetDir}/${baseFileName}-sources.jar">
			<fileset dir="${workDir}/src" />
			<manifest>
				<attribute name="Implementation-Title"
				           value="${name}-sources" />
				<attribute name="Implementation-Vendor" value="${vendor}" />
				<attribute name="Implementation-Version"
				           value="${fullVersion}" />
			</manifest>
		</jar>
	</target>

	<target name="makePom">
		<condition property="shouldMakePom">
			<and>
				<istrue value="${makePom}" />
				<available file="${ivyFile}" />
			</and>
		</condition>

		<if>
			<istrue value="${shouldMakePom}" />
			<then>
				<copy file="${resourcesDir}/dorado-addon-template.pom"
				      todir="${workDir}/temp" />
				<replace dir="${workDir}/temp"
				         token="%revision%"
				         value="${revision}"
				         encoding="${srcCharset}">
					<include name="dorado-addon-template.pom" />
				</replace>
				<replace dir="${workDir}/temp"
				         token="%vendor%"
				         value="${vendor}"
				         encoding="${srcCharset}">
					<include name="dorado-addon-template.pom" />
				</replace>

				<ivy:makepom ivyfile="${ivyFile}"
				             pomfile="${targetDir}/${baseFileName}.pom"
				             templateFile="${workDir}/temp/dorado-addon-template.pom"
				             conf="compile">
					<mapping conf="compile" scope="compile" />
				</ivy:makepom>
			</then>
		</if>
	</target>

	<target name="buildJava"
	        depends="preprocessJavaSource,compile,javadoc,buildJar,buildSourceJar,makePom" />

	<target name="buildArchieves" depends="mergeSource,buildClient,buildJava" />

	<target name="outputProperties">
		<propertyfile file="${workDir}/temp/output.properties">
			<entry key="baseFileName" value="${baseFileName}" />
			<entry key="revision" value="${revision}" />
			<entry key="publication" value="${publication}" />
			<entry key="fullVersion" value="${fullVersion}" />
		</propertyfile>
	</target>

	<target name="buildAll" depends="init,buildArchieves,outputProperties" />
</project>